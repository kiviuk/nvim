---
File: ./init.lua
---
require("h.core")
require("h.lazy")

---
File: ./lua/h/core/init.lua
---
require("h.core.options")
require("h.core.keymaps")

---
File: ./lua/h/core/keymaps.lua
---
vim.g.mapleader = " "

local keymap = vim.keymap

keymap.set("i", "jk", "<ESC>", { desc = "Exit i mode with jk" })
keymap.set("n", "<leader>nh", ":nohl<CR>", { desc = "Clear search highlights" })

-- inc/dec numbers
keymap.set("n", "<leader>=", "<C-a>", { desc = "Inc numb" })
keymap.set("n", "<leader>-", "<C-x>", { desc = "Dec numb" })

-- window management
keymap.set("n", "<leader>sv", "<C-w>v", { desc = "Split window vert" })
keymap.set("n", "<leader>sh", "<C-w>s", { desc = "Split window horiz" })
keymap.set("n", "<leader>se", "<C-w>=", { desc = "Split window equal size" })
keymap.set("n", "<leader>sx", "<cmd>close<CR>", { desc = "Close current split" })

keymap.set("n", "<leader>to", "<cmd>tabnew<CR>", { desc = "Open new tab" })
keymap.set("n", "<leader>tx", "<cmd>tabclose<CR>", { desc = "Close current tab" })
keymap.set("n", "<leader>tn", "<cmd>tabn<CR>", { desc = "Go to next tab" })
keymap.set("n", "<leader>tp", "<cmd>tabp<CR>", { desc = "Go to previous tab" })
keymap.set("n", "<leader>tf", "<cmd>tabnew %<CR>", { desc = "Open current buffer in new tab" })

vim.keymap.set("n", "<C-s>", ":w<CR>", { noremap = true, silent = true, desc = "Save file" })

-- Add this to your existing config (inside the nvim-tree setup or keymaps section)
vim.keymap.set("n", "<M-Left>", "<cmd>NvimTreeFocus<CR>", { desc = "Focus Explorer" })
vim.keymap.set("n", "<M-Right>", "<cmd>wincmd p<CR>", { desc = "Focus Back to Buffer" })

-- Close Neovim (force quit)
vim.keymap.set("n", "<leader>qq", ":qa!<CR>", { desc = "Force quit all" })

-- Save all and quit
vim.keymap.set("n", "<leader>qs", function()
  -- 1. Save the session first (if available)
  local success, _ = pcall(function()
    vim.cmd("SessionSave")
  end)

  -- 2. Save all buffers and quit
  vim.cmd("xa") -- Equivalent to :wqa (write all changed buffers and quit)
end, { desc = "Save session + all files and quit" })

-- <leader>Ã¤
vim.keymap.set("n", "<leader>'", vim.diagnostic.open_float, { desc = "Show diagnostics in floating window" })

-- Save / recall last cursor position
vim.api.nvim_create_autocmd("BufReadPost", {
  pattern = "*",
  callback = function()
    local mark = vim.api.nvim_buf_get_mark(0, '"')
    local lcount = vim.api.nvim_buf_line_count(0)
    if mark[1] > 0 and mark[1] <= lcount then
      pcall(vim.api.nvim_win_set_cursor, 0, mark)
    end
  end,
})

---
File: ./lua/h/core/options.lua
---
vim.cmd("let g:netrw_liststyle = 3")

local opt = vim.opt

opt.relativenumber = true
opt.number = true

-- tabs & indention
opt.tabstop = 2
opt.shiftwidth = 2 -- spaces for indent width
opt.expandtab = true
opt.autoindent = true

opt.wrap = false

-- search settings
opt.ignorecase = true
opt.smartcase = true

opt.cursorline = true

opt.termguicolors = true
opt.background = "dark"
opt.signcolumn = "yes"

-- backspace
opt.backspace = "indent,eol,start"

-- clipboard
opt.clipboard:append("unnamedplus")

-- split windows
opt.splitright = true
opt.splitbelow = true

opt.sessionoptions:append("localoptions")

opt.undofile = true
opt.undodir = vim.fn.stdpath("state") .. "/undo"

---
File: ./lua/h/plugins/init.lua
---
return {
  "nvim-lua/plenary.nvim",
  "christoomey/vim-tmux-navigator",

  require("h.plugins.nvim-cmp"),
  require("h.plugins.codium"),
}

---
File: ./lua/h/plugins/vim-maximizer.lua
---
return {
  "szw/vim-maximizer",
  keys = {
    { "<leader>sm", "<cmd>MaximizerToggle<CR>", desc = "Maximize/minimize a split" },
  },
}

---
File: ./lua/h/plugins/formatting.lua
---
return {
	"stevearc/conform.nvim",
	event = { "BufReadPre", "BufNewFile" },
	config = function()
		local conform = require("conform")

		conform.setup({
			formatters_by_ft = {
				javascript = { "prettier" },
				typescript = { "prettier" },
				javascriptreact = { "prettier" },
				typescriptreact = { "prettier" },
				svelte = { "prettier" },
				css = { "prettier" },
				html = { "prettier" },
				json = { "prettier" },
				yaml = { "prettier" },
				markdown = { "prettier" },
				graphql = { "prettier" },
				liquid = { "prettier" },
				lua = { "stylua" },
				python = { "isort", "ruff" },
			},
			format_on_save = {
				lsp_fallback = true,
				async = false,
				timeout_ms = 1000,
			},
		})

		vim.keymap.set({ "n", "v" }, "<leader>mp", function()
			conform.format({
				lsp_fallback = true,
				async = false,
				timeout_ms = 1000,
			})
		end, { desc = "Format file or range (in visual mode)" })
	end,
}

---
File: ./lua/h/plugins/autopairs.lua
---
return {
  "windwp/nvim-autopairs",
  event = { "InsertEnter" },
  dependencies = {
    "hrsh7th/nvim-cmp",
  },
  config = function()
    -- import nvim-autopairs
    local autopairs = require("nvim-autopairs")

    -- configure autopairs
    autopairs.setup({
      check_ts = true, -- enable treesitter
      ts_config = {
        lua = { "string" }, -- don't add pairs in lua string treesitter nodes
        javascript = { "template_string" }, -- don't add pairs in javscript template_string treesitter nodes
        java = false, -- don't check treesitter on java
      },
    })

    -- import nvim-autopairs completion functionality
    local cmp_autopairs = require("nvim-autopairs.completion.cmp")

    -- import nvim-cmp plugin (completions plugin)
    local cmp = require("cmp")

    -- make autopairs and completion work together
    cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())
  end,
}

---
File: ./lua/h/plugins/nvim-dap.lua
---
return {
  "mfussenegger/nvim-dap",
  -- LAZY-LOADING TRIGGERS: Load on command, keymap, or when a dependency needs it.
  cmd = {
    "DapContinue",
    "DapClose",
    "DapStepOver",
    "DapStepInto",
    "DapStepOut",
    "DapToggleBreakpoint",
    "DapTerminate",
  },
  keys = {
    { "<leader>d" }, -- Any key starting with <leader>d will now load the plugin
  },
  dependencies = {
    -- UI for DAP - Now correctly lazy-loaded
    {
      "rcarriga/nvim-dap-ui",
      -- No event trigger here. It will be loaded on demand by the main dap config below.
      dependencies = { "nvim-neotest/nvim-nio" },
      -- The config for dapui can be minimal or empty, as we'll set it up from the main dap plugin.
      opts = {
        controls = { enabled = true },
      },
    },

    -- Other dependencies...
    { "williamboman/mason.nvim" },
    {
      "jay-babu/mason-nvim-dap.nvim",
      dependencies = { "williamboman/mason.nvim", "mfussenegger/nvim-dap" },
      config = function()
        require("mason-nvim-dap").setup({
          automatic_installation = true,
          handlers = {},
        })
      end,
    },
    { "theHamsta/nvim-dap-virtual-text", config = true },
    {
      "nvim-telescope/telescope-dap.nvim",
      dependencies = { "nvim-telescope/telescope.nvim" },
      config = function()
        require("telescope").load_extension("dap")
      end,
    },
  },

  -- THIS IS THE MAIN CONFIGURATION BLOCK FOR THE DAP PLUGIN
  config = function()
    local dap = require("dap")
    local dapui = require("dapui")

    -- *** THIS IS THE KEY CHANGE ***
    -- Setup listeners that will load and open dap-ui when a debug session starts.
    dap.listeners.after.event_initialized["dapui_config"] = function()
      dapui.open()
    end
    dap.listeners.before.event_terminated["dapui_config"] = function()
      dapui.close()
    end
    dap.listeners.before.event_exited["dapui_config"] = function()
      dapui.close()
    end

    -- Keymaps for dapui. These will work because the main 'dap' plugin is loaded.
    vim.keymap.set("n", "<Leader>dut", dapui.toggle, { desc = "DAP UI Toggle" })
    vim.keymap.set("n", "<Leader>due", function()
      dapui.eval(nil, { enter = true })
    end, { desc = "DAP UI Eval Input" })
    vim.keymap.set("v", "<Leader>due", dapui.eval, { desc = "DAP UI Eval Visual" })

    -- Define how to launch or attach to Java/Scala applications
    dap.configurations.java = {
      {
        type = "java",
        request = "launch",
        name = "Launch Current File (Java)",
        mainClass = "",
        projectName = "",
      },
      {
        type = "java",
        request = "attach",
        name = "Attach to Remote JVM",
        hostName = "127.0.0.1",
        port = 5005,
      },
    }
    dap.configurations.scala = dap.configurations.java
  end,
}

---
File: ./lua/h/plugins/telescope.lua
---
return {
  "nvim-telescope/telescope.nvim",
  -- LAZY-LOADING TRIGGERS: Load on command or keymap
  cmd = "Telescope",
  keys = { "<leader>f" },
  branch = "0.1.x",
  dependencies = {
    "nvim-lua/plenary.nvim",
    { "nvim-telescope/telescope-fzf-native.nvim", build = "make" },
    "nvim-tree/nvim-web-devicons",
    "folke/todo-comments.nvim",
  },
  config = function()
    local telescope = require("telescope")
    local actions = require("telescope.actions")

    telescope.setup({
      defaults = {
        path_display = { "smart" },
        mappings = {
          i = {
            ["<C-k>"] = actions.move_selection_previous, -- move to prev result
            ["<C-j>"] = actions.move_selection_next, -- move to next result
            ["<C-q>"] = actions.send_selected_to_qflist + actions.open_qflist,
          },
        },
      },
    })

    telescope.load_extension("fzf")

    -- set keymaps
    local keymap = vim.keymap -- for conciseness

    keymap.set("n", "<leader>ff", "<cmd>Telescope find_files<cr>", { desc = "Fuzzy find files in cwd" })
    keymap.set("n", "<leader>fr", "<cmd>Telescope oldfiles<cr>", { desc = "Fuzzy find recent files" })
    keymap.set("n", "<leader>fs", "<cmd>Telescope live_grep<cr>", { desc = "Find string in cwd" })
    keymap.set("n", "<leader>fc", "<cmd>Telescope grep_string<cr>", { desc = "Find string under cursor in cwd" })
    keymap.set("n", "<leader>ft", "<cmd>TodoTelescope<cr>", { desc = "Find todos" })
  end,
}

---
File: ./lua/h/plugins/substitute.lua
---
return {
  "gbprod/substitute.nvim",
  event = { "VeryLazy" },
  config = function()
    local substitute = require("substitute")

    substitute.setup()

    -- set keymaps
    local keymap = vim.keymap -- for conciseness

    vim.keymap.set("n", "s", substitute.operator, { desc = "Substitute with motion" })
    vim.keymap.set("n", "ss", substitute.line, { desc = "Substitute line" })
    vim.keymap.set("n", "S", substitute.eol, { desc = "Substitute to end of line" })
    vim.keymap.set("x", "s", substitute.visual, { desc = "Substitute in visual mode" })
  end,
}

---
File: ./lua/h/plugins/alpha.lua
---
return {
  "goolord/alpha-nvim",
  event = "VimEnter",
  config = function()
    local alpha = require("alpha")
    local dashboard = require("alpha.themes.dashboard")

    -- Set header
    dashboard.section.header.val = {
      "                                                     ",
      "  ââââ   âââââââââââ âââââââ âââ   ââââââââââ   ââââ ",
      "  âââââ  âââââââââââââââââââââââ   âââââââââââ âââââ ",
      "  ââââââ âââââââââ  âââ   ââââââ   âââââââââââââââââ ",
      "  ââââââââââââââââ  âââ   âââââââ ââââââââââââââââââ ",
      "  âââ âââââââââââââââââââââââ âââââââ ââââââ âââ âââ ",
      "  âââ  âââââââââââââ âââââââ   âââââ  ââââââ     âââ ",
      "                                                     ",
    }

    -- Set menu
    dashboard.section.buttons.val = {
      dashboard.button("e", "ï  > New File", "<cmd>ene<CR>"),
      dashboard.button("SPC ee", "î¾  > Toggle file explorer", "<cmd>NvimTreeToggle<CR>"),
      dashboard.button("SPC ff", "ó°±¼ > Find File", "<cmd>Telescope find_files<CR>"),
      dashboard.button("SPC fs", "ï¢  > Find Word", "<cmd>Telescope live_grep<CR>"),
      dashboard.button("SPC wr", "ó°¯  > Restore Session For Current Directory", "<cmd>SessionRestore<CR>"),
      dashboard.button("q", "ï > Quit NVIM", "<cmd>qa<CR>"),
    }

    -- Send config to alpha
    alpha.setup(dashboard.opts)

    -- Disable folding on alpha buffer
    vim.cmd([[autocmd FileType alpha setlocal nofoldenable]])
  end,
}

---
File: ./lua/h/plugins/linting.lua
---
return {
  "mfussenegger/nvim-lint",
  event = { "BufReadPre", "BufNewFile" },
  config = function()
    local lint = require("lint")

    lint.linters_by_ft = {
      javascript = { "eslint_d" },
      typescript = { "eslint_d" },
      javascriptreact = { "eslint_d" },
      typescriptreact = { "eslint_d" },
      svelte = { "eslint_d" },
      python = { "pylint" },
    }

    local lint_augroup = vim.api.nvim_create_augroup("lint", { clear = true })

    vim.api.nvim_create_autocmd({ "BufEnter", "BufWritePost", "InsertLeave" }, {
      group = lint_augroup,
      callback = function()
        lint.try_lint()
      end,
    })

    vim.keymap.set("n", "<leader>l", function()
      lint.try_lint()
    end, { desc = "Trigger linting for current file" })
  end,
}

---
File: ./lua/h/plugins/nvim-cmp.lua
---
return {
  "hrsh7th/nvim-cmp",
  event = "InsertEnter",
  dependencies = {
    "hrsh7th/cmp-buffer", -- source for text in buffer
    "hrsh7th/cmp-path", -- source for file system paths
    {
      "L3MON4D3/LuaSnip",
      -- follow latest release.
      version = "v2.*", -- Replace <CurrentMajor> by the latest released major (first number of latest release)
      -- install jsregexp (optional!).
      build = "make install_jsregexp",
    },
    "saadparwaiz1/cmp_luasnip", -- for autocompletion
    "rafamadriz/friendly-snippets", -- useful snippets
    "onsails/lspkind.nvim", -- vs-code like pictograms
  },
  config = function()
    local cmp = require("cmp")

    local luasnip = require("luasnip")

    local lspkind = require("lspkind")

    -- loads vscode style snippets from installed plugins (e.g. friendly-snippets)
    require("luasnip.loaders.from_vscode").lazy_load()

    cmp.setup({
      completion = {
        completeopt = "menu,menuone,preview,noselect",
      },
      snippet = { -- configure how nvim-cmp interacts with snippet engine
        expand = function(args)
          luasnip.lsp_expand(args.body)
        end,
      },
      mapping = cmp.mapping.preset.insert({
        ["<C-k>"] = cmp.mapping.select_prev_item(), -- previous suggestion
        ["<C-j>"] = cmp.mapping.select_next_item(), -- next suggestion
        ["<C-b>"] = cmp.mapping.scroll_docs(-4),
        ["<C-f>"] = cmp.mapping.scroll_docs(4),
        ["<C-Space>"] = cmp.mapping.complete(), -- show completion suggestions
        ["<C-e>"] = cmp.mapping.abort(), -- close completion window
        ["<CR>"] = cmp.mapping.confirm({ select = false }),
      }),

      -- sources for autocompletion
      sources = cmp.config.sources({
        { name = "codeium" }, -- Add this line at the top!
        { name = "nvim_lsp" },
        { name = "luasnip" }, -- snippets
        { name = "buffer" }, -- text within current buffer
        { name = "path" }, -- file system paths
      }),

      -- configure lspkind for vs-code like pictograms in completion menu
      formatting = {
        format = lspkind.cmp_format({
          maxwidth = 50,
          ellipsis_char = "...",
        }),
      },
    })
  end,
}

---
File: ./lua/h/plugins/trouble.lua
---
return {
  "folke/trouble.nvim",
  dependencies = { "nvim-tree/nvim-web-devicons", "folke/todo-comments.nvim" },
  opts = {
    focus = true,
  },
  cmd = "Trouble",
  keys = {
    { "<leader>xw", "<cmd>Trouble diagnostics toggle<CR>", desc = "Open trouble workspace diagnostics" },
    { "<leader>xd", "<cmd>Trouble diagnostics toggle filter.buf=0<CR>", desc = "Open trouble document diagnostics" },
    { "<leader>xq", "<cmd>Trouble quickfix toggle<CR>", desc = "Open trouble quickfix list" },
    { "<leader>xl", "<cmd>Trouble loclist toggle<CR>", desc = "Open trouble location list" },
    { "<leader>xt", "<cmd>Trouble todo toggle<CR>", desc = "Open todos in trouble" },
  },
}

---
File: ./lua/h/plugins/todo-comments.lua
---
return {
  "folke/todo-comments.nvim",
  event = { "VeryLazy" },
  dependencies = { "nvim-lua/plenary.nvim" },
  config = function()
    local todo_comments = require("todo-comments")

    -- set keymaps
    local keymap = vim.keymap -- for conciseness

    keymap.set("n", "]t", function()
      todo_comments.jump_next()
    end, { desc = "Next todo comment" })

    keymap.set("n", "[t", function()
      todo_comments.jump_prev()
    end, { desc = "Previous todo comment" })

    todo_comments.setup()
  end,
}

---
File: ./lua/h/plugins/auto-session.lua
---
return {
  "rmagatti/auto-session",
  event = "VimEnter",
  config = function()
    -- Try reducing sessionoptions
    vim.o.sessionoptions = table.concat({
      "buffers",
      "curdir",
      "folds",
      "tabpages",
      "winsize",
      "winpos",
      "localoptions",
    }, ",")

    local auto_session = require("auto-session")
    auto_session.setup({
      log_level = vim.log.levels.WARN,
      auto_restore_enabled = true,
      auto_session_suppress_dirs = { "~/", "~/Dev/", "~/Downloads", "~/Documents", "~/Desktop/" },
    })
  end,
}

---
File: ./lua/h/plugins/nvim-tree.lua
---
return {
  "nvim-tree/nvim-tree.lua",
  cmd = { "NvimTreeToggle", "NvimTreeFindFile", "NvimTreeFocus" },
  keys = { { "<leader>e" }, { "<M-Left>" } },
  dependencies = "nvim-tree/nvim-web-devicons",
  config = function()
    local nvimtree = require("nvim-tree")
    local keymap = vim.keymap

    -- recommended settings from nvim-tree documentation
    vim.g.loaded_netrw = 1
    vim.g.loaded_netrwPlugin = 1

    -- Open and focus the current file on startup
    -- vim.api.nvim_create_autocmd({ "VimEnter" }, {
    -- callback = function()
    -- require("nvim-tree.api").tree.open({ focus = false })
    -- end,
    -- })

    nvimtree.setup({
      update_focused_file = {
        enable = true,
        update_cwd = true,
      },
      view = {
        width = 35,
        relativenumber = true,
      },
      -- change folder arrow icons
      renderer = {
        indent_markers = {
          enable = true,
        },
        icons = {
          glyphs = {
            folder = {
              arrow_closed = "ï¡", -- arrow when folder is closed
              arrow_open = "ï£", -- arrow when folder is open
            },
          },
        },
      },
      -- disable window_picker for
      -- explorer to work well with
      -- window splits
      actions = {
        open_file = {
          window_picker = {
            enable = false,
          },
        },
      },
      filters = {
        custom = { ".DS_Store" },
      },
      git = {
        ignore = false,
      },
    })

    keymap.set("n", "<leader>ee", "<cmd>NvimTreeToggle<CR>", { desc = "Toggle file explorer" }) -- toggle file explorer
    keymap.set("n", "<leader>ef", "<cmd>NvimTreeFindFile<CR>", { desc = "Toggle file explorer on current file" }) -- toggle file explorer on current file
    keymap.set("n", "<leader>ec", "<cmd>NvimTreeCollapse<CR>", { desc = "Collapse file explorer" }) -- collapse file explorer
    keymap.set("n", "<leader>er", "<cmd>NvimTreeRefresh<CR>", { desc = "Refresh file explorer" }) -- refresh file explorer
  end,
}

---
File: ./lua/h/plugins/lsp/mason.lua
---
return {
  -- Mason Core: Handles the UI and installation backend
  {
    "williamboman/mason.nvim",
    cmd = "Mason", -- Load Mason only when you run :Mason
    -- You can use 'opts' for simple table-based configuration
    -- or 'config' for function-based setup. 'opts' is often cleaner for simple cases.
    opts = {
      ui = {
        icons = {
          package_installed = "â",
          package_pending = "â",
          package_uninstalled = "â",
        },
      },
    },
  },

  -- Mason LSP Config: Bridges Mason with nvim-lspconfig
  -- This should load when you actually open files that need LSPs.
  {
    "williamboman/mason-lspconfig.nvim",
    event = { "BufReadPre", "BufNewFile" }, -- Trigger when opening a file
    dependencies = {
      "williamboman/mason.nvim", -- Needs mason to know what's installed
      "neovim/nvim-lspconfig", -- It will configure servers for nvim-lspconfig
    },
    config = function()
      local mason_lspconfig = require("mason-lspconfig")

      mason_lspconfig.setup({
        ensure_installed = {
          "lua_ls",
          -- Add other LSPs you always want installed here
          -- e.g., "pyright", "tsserver", "gopls", "rust_analyzer"
        },
        -- This is crucial: it tells mason-lspconfig how to setup servers.
        -- The 'handlers' section tells mason-lspconfig how to call `lspconfig.SERVER.setup{}`
        handlers = {
          -- Default handler: Sets up LSP with default capabilities.
          -- You should ideally pass your CMP capabilities here.
          function(server_name)
            require("lspconfig")[server_name].setup({
              capabilities = require("cmp_nvim_lsp").default_capabilities(), -- If using nvim-cmp
            })
          end,

          -- Example for lua_ls with specific settings
          ["lua_ls"] = function()
            require("lspconfig").lua_ls.setup({
              capabilities = require("cmp_nvim_lsp").default_capabilities(), -- If using nvim-cmp
              settings = {
                Lua = {
                  diagnostics = { globals = { "vim" } },
                  workspace = { checkThirdParty = false }, -- If you use EmmyLua-like annotations
                  telemetry = { enable = false },
                },
              },
            })
          end,
          -- Add more custom handlers for other LSPs if they need special setup
          -- e.g. ["pyright"] = function() require("lspconfig").pyright.setup({...}) end
        },
      })
    end,
  },

  -- nvim-lspconfig: The actual LSP client functionality
  -- This also loads when you open files.
  {
    "neovim/nvim-lspconfig",
    event = { "BufReadPre", "BufNewFile" },
    config = function()
      -- Global LSP settings, keymaps, and diagnostic configurations go here.
      -- This function runs when nvim-lspconfig is loaded.
      -- Actual server `setup` calls are handled by mason-lspconfig's handlers.

      -- Example: Setup keymaps on LspAttach
      vim.api.nvim_create_autocmd("LspAttach", {
        group = vim.api.nvim_create_augroup("UserLspConfig", {}),
        callback = function(ev)
          -- Enable completion triggered by <c-x><c-o>
          vim.bo[ev.buf].omnifunc = "v:lua.vim.lsp.omnifunc"

          -- Buffer local mappings.
          local opts = { buffer = ev.buf, noremap = true, silent = true }
          vim.keymap.set("n", "gD", vim.lsp.buf.declaration, opts)
          vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
          vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
          vim.keymap.set("n", "gi", vim.lsp.buf.implementation, opts)
          vim.keymap.set("n", "<C-k>", vim.lsp.buf.signature_help, opts)
          vim.keymap.set("n", "<space>wa", vim.lsp.buf.add_workspace_folder, opts)
          vim.keymap.set("n", "<space>wr", vim.lsp.buf.remove_workspace_folder, opts)
          vim.keymap.set("n", "<space>wl", function()
            print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
          end, opts)
          vim.keymap.set("n", "<space>D", vim.lsp.buf.type_definition, opts)
          vim.keymap.set("n", "<space>rn", vim.lsp.buf.rename, opts)
          vim.keymap.set({ "n", "v" }, "<space>ca", vim.lsp.buf.code_action, opts)
          vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
          vim.keymap.set("n", "<space>f", function()
            vim.lsp.buf.format({ async = true })
          end, opts)

          -- Diagnostics
          vim.keymap.set("n", "[d", vim.diagnostic.goto_prev, opts)
          vim.keymap.set("n", "]d", vim.diagnostic.goto_next, opts)
          vim.keymap.set("n", "<space>e", vim.diagnostic.open_float, opts)
          vim.keymap.set("n", "<space>q", vim.diagnostic.setloclist, opts)
        end,
      })
    end,
  },

  -- Mason Tool Installer: For formatters, linters etc.
  {
    "WhoIsSethDaniel/mason-tool-installer.nvim",
    -- When to run?
    -- Option 1: When Mason is loaded (if you often manage tools via Mason UI)
    -- cmd = "Mason",
    -- Option 2: More passively in the background after startup
    event = "VeryLazy",
    -- Option 3: Or trigger its own command if it provides one e.g. cmd = "MasonToolsUpdate"
    dependencies = { "williamboman/mason.nvim" },
    opts = {
      ensure_installed = {
        "prettier", -- prettier formatter
        "stylua", -- lua formatter
        "isort", -- python formatter
        "ruff", -- python formatter / linter
        "pylint", -- python linter (ruff can often replace this)
        "eslint_d", -- js linter
        -- Add other linters/formatters
      },
      -- auto_update = true, -- Optional: automatically update tools
      -- run_on_start = true, -- Optional: run ensure_installed on Neovim start (can slow down startup if many tools)
      -- If false, you might need to run a command to install them initially.
      -- If using `event = "VeryLazy"`, `run_on_start = true` is common.
    },
  },
}

---
File: ./lua/h/plugins/lualine.lua
---
return {
  "nvim-lualine/lualine.nvim",
  dependencies = { "nvim-tree/nvim-web-devicons" },
  config = function()
    local lualine = require("lualine")
    local lazy_status = require("lazy.status") -- to configure lazy pending updates count

    local colors = {
      blue = "#65D1FF",
      green = "#3EFFDC",
      violet = "#FF61EF",
      yellow = "#FFDA7B",
      red = "#FF4A4A",
      fg = "#c3ccdc",
      bg = "#112638",
      inactive_bg = "#2c3043",
    }

    local my_lualine_theme = {
      normal = {
        a = { bg = colors.blue, fg = colors.bg, gui = "bold" },
        b = { bg = colors.bg, fg = colors.fg },
        c = { bg = colors.bg, fg = colors.fg },
      },
      insert = {
        a = { bg = colors.green, fg = colors.bg, gui = "bold" },
        b = { bg = colors.bg, fg = colors.fg },
        c = { bg = colors.bg, fg = colors.fg },
      },
      visual = {
        a = { bg = colors.violet, fg = colors.bg, gui = "bold" },
        b = { bg = colors.bg, fg = colors.fg },
        c = { bg = colors.bg, fg = colors.fg },
      },
      command = {
        a = { bg = colors.yellow, fg = colors.bg, gui = "bold" },
        b = { bg = colors.bg, fg = colors.fg },
        c = { bg = colors.bg, fg = colors.fg },
      },
      replace = {
        a = { bg = colors.red, fg = colors.bg, gui = "bold" },
        b = { bg = colors.bg, fg = colors.fg },
        c = { bg = colors.bg, fg = colors.fg },
      },
      inactive = {
        a = { bg = colors.inactive_bg, fg = colors.semilightgray, gui = "bold" },
        b = { bg = colors.inactive_bg, fg = colors.semilightgray },
        c = { bg = colors.inactive_bg, fg = colors.semilightgray },
      },
    }

    -- configure lualine with modified theme
    lualine.setup({
      options = {
        theme = my_lualine_theme,
      },
      sections = {
        lualine_x = {
          {
            lazy_status.updates,
            cond = lazy_status.has_updates,
            color = { fg = "#ff9e64" },
          },
          { "encoding" },
          { "fileformat" },
          { "filetype" },
        },
      },
    })
  end,
}

---
File: ./lua/h/plugins/colorschema.lua
---
return {
  {
   "folke/tokyonight.nvim",
   priority = 1000,
   config = function()
     local bg = "#011628"
     local bg_dark = "#011423"
     local bg_highlight = "#143652"
     local bg_search = "#0A64AC"
     local bg_visual = "#275378"
     local fg = "#CBE0F0"
     local fg_dark = "#B4D0E9"
     local fg_gutter = "#627E97"
     local border = "#547998"

     require("tokyonight").setup({
       style = "night",
       on_colors = function(colors)
         colors.bg = bg
         colors.bg_dark = bg_dark
         colors.bg_float = bg_dark
         colors.bg_highlight = bg_highlight
         colors.bg_popup = bg_dark
         colors.bg_search = bg_search
         colors.bg_sidebar = bg_dark
         colors.bg_statusline = bg_dark
         colors.bg_visual = bg_visual
         colors.border = border
         colors.fg = fg
         colors.fg_dark = fg_dark
         colors.fg_float = fg
         colors.fg_gutter = fg_gutter
         colors.fg_sidebar = fg_dark
       end  
     })
     -- load color scheme here
     vim.cmd([[colorscheme tokyonight]])
   end,
  },
}

---
File: ./lua/h/plugins/gitsigns.lua
---
return {
  "lewis6991/gitsigns.nvim",
  event = { "BufReadPre", "BufNewFile" },
  opts = {
    on_attach = function(bufnr)
      local gs = package.loaded.gitsigns

      local function map(mode, l, r, desc)
        vim.keymap.set(mode, l, r, { buffer = bufnr, desc = desc })
      end

      -- Navigation
      map("n", "]h", gs.next_hunk, "Next Hunk")
      map("n", "[h", gs.prev_hunk, "Prev Hunk")

      -- Actions
      map("n", "<leader>hs", gs.stage_hunk, "Stage hunk")
      map("n", "<leader>hr", gs.reset_hunk, "Reset hunk")
      map("v", "<leader>hs", function()
        gs.stage_hunk({ vim.fn.line("."), vim.fn.line("v") })
      end, "Stage hunk")
      map("v", "<leader>hr", function()
        gs.reset_hunk({ vim.fn.line("."), vim.fn.line("v") })
      end, "Reset hunk")

      map("n", "<leader>hS", gs.stage_buffer, "Stage buffer")
      map("n", "<leader>hR", gs.reset_buffer, "Reset buffer")

      map("n", "<leader>hu", gs.undo_stage_hunk, "Undo stage hunk")

      map("n", "<leader>hp", gs.preview_hunk, "Preview hunk")

      map("n", "<leader>hb", function()
        gs.blame_line({ full = true })
      end, "Blame line")
      map("n", "<leader>hB", gs.toggle_current_line_blame, "Toggle line blame")

      map("n", "<leader>hd", gs.diffthis, "Diff this")
      map("n", "<leader>hD", function()
        gs.diffthis("~")
      end, "Diff this ~")

      -- Text object
      map({ "o", "x" }, "ih", ":<C-U>Gitsigns select_hunk<CR>", "Gitsigns select hunk")
    end,
  },
}

---
File: ./lua/h/plugins/nvim-metals.lua
---
return {
  "scalameta/nvim-metals",
  ft = { "scala", "sbt", "java" },
  dependencies = {
    "nvim-lua/plenary.nvim",
    "mfussenegger/nvim-dap",
    "hrsh7th/nvim-cmp",
    "hrsh7th/cmp-nvim-lsp",
  },
  -- The config function now runs automatically for the correct filetypes
  config = function()
    -- Get the bare config and add our customizations
    local metals_config = require("metals").bare_config()
    metals_config.capabilities = require("cmp_nvim_lsp").default_capabilities()

    metals_config.on_attach = function(client, bufnr)
      -- Helper for setting buffer-local keymaps
      local map = function(keys, func, desc)
        vim.keymap.set("n", keys, func, { buffer = bufnr, desc = "LSP: " .. desc })
      end
      -- Your core keymaps
      map("K", vim.lsp.buf.hover, "Hover")
      map("gd", vim.lsp.buf.definition, "Go To Definition")
      -- ... etc
    end

    metals_config.settings = {
      showImplicitArguments = true,
      showInferredType = true,
    }

    -- Simply initialize the server. No autocmd needed.
    require("metals").initialize_or_attach(metals_config)
  end,
}

---
File: ./lua/h/plugins/comment.lua
---
return {
  "numToStr/Comment.nvim",
  event = { "VeryLazy" },
  dependencies = {
    "JoosepAlviste/nvim-ts-context-commentstring",
  },
  config = function()
    -- import comment plugin safely
    local comment = require("Comment")

    local ts_context_commentstring = require("ts_context_commentstring.integrations.comment_nvim")

    -- enable comment
    comment.setup({
      -- for commenting tsx, jsx, svelte, html files
      pre_hook = ts_context_commentstring.create_pre_hook(),
    })
  end,
}

---
File: ./lua/h/plugins/dressing.lua
---
return {
  "stevearc/dressing.nvim",
  event = "VeryLazy",
  enabled = false,
}

---
File: ./lua/h/plugins/which-key.lua
---
return {
  "folke/which-key.nvim",
  event = "VeryLazy",
  init = function()
    vim.o.timeout = true
    vim.o.timeoutlen = 500
  end,
  opts = {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  },
}

---
File: ./lua/h/plugins/treesitter.lua
---
return {
  "nvim-treesitter/nvim-treesitter",
  event = { "BufReadPre", "BufNewFile" },
  build = ":TSUpdate",
  dependencies = {
    "windwp/nvim-ts-autotag",
  },
  config = function()
    -- import nvim-treesitter plugin
    local treesitter = require("nvim-treesitter.configs")

    -- configure treesitter
    treesitter.setup({ -- enable syntax highlighting
      highlight = {
        enable = true,
      },
      -- enable indentation
      indent = { enable = true },
      -- enable autotagging (w/ nvim-ts-autotag plugin)
      autotag = {
        enable = true,
      },
      -- ensure these language parsers are installed
      ensure_installed = {
        "json",
        "javascript",
        "typescript",
        "tsx",
        "yaml",
        "html",
        "xml",
        "css",
        "prisma",
        "markdown",
        "markdown_inline",
        "svelte",
        "graphql",
        "bash",
        "lua",
        "vim",
        "dockerfile",
        "gitignore",
        "query",
        "vimdoc",
        "c",
        "java",
        "scala",
        "rust",
      },
      incremental_selection = {
        enable = true,
        keymaps = {
          init_selection = "<C-y>",
          node_incremental = "<C-y>",
          scope_incremental = false,
          node_decremental = "<bs>",
        },
      },
    })
  end,
}

---
File: ./lua/h/plugins/indent-blankline.lua
---
return {
  "lukas-reineke/indent-blankline.nvim",
  event = { "BufReadPre", "BufNewFile" },
  main = "ibl",
  opts = {
    indent = { char = "â" },
  },
}

---
File: ./lua/h/plugins/bufferline.lua
---
return {
  "akinsho/bufferline.nvim",
  dependencies = { "nvim-tree/nvim-web-devicons" },
  version = "*",
  opts = {
    options = {
      mode = "tabs",
      separator_style = "slant",
    },
  },
}

---
File: ./lua/h/plugins/surround.lua
---
return {
  "kylechui/nvim-surround",
  event = { "VeryLazy" },
  version = "*", -- Use for stability; omit to use `main` branch for the latest features
  config = true,
}

---
File: ./lua/h/plugins/lazygit.lua
---
return {
	"kdheepak/lazygit.nvim",
	cmd = {
		"LazyGit",
		"LazyGitConfig",
		"LazyGitCurrentFile",
		"LazyGitFilter",
		"LazyGitFilterCurrentFile",
	},
	-- optional for floating window border decoration
	dependencies = {
		"nvim-lua/plenary.nvim",
	},
	-- setting the keybinding for LazyGit with 'keys' is recommended in
	-- order to load the plugin when the command is run for the first time
	keys = {
		{ "<leader>lg", "<cmd>LazyGit<cr>", desc = "Open lazy git" },
	},
}

---
File: ./lua/h/plugins/codium.lua
---
return {
  "Exafunction/windsurf.nvim",
  dependencies = {
    "nvim-lua/plenary.nvim",
    "hrsh7th/nvim-cmp",
  },
  config = function()
    require("codeium").setup({})
  end,
}

---
File: ./lua/h/lazy.lua
---
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({ { import = "h.plugins" }, { import = "h.plugins.lsp" } }, { 
  checker = {
    enabled = true,
    notify = false,
  },
  change_detection = {
    notify = false,
  },
})

